//http://forums.create.msdn.com/forums/p/49855/300529.aspx
public bool PointIsInsideEllipse(Vector2 pointToCheck, Vector2 ellipsePos, float ellipseHeight, float ellipseWidth) 
        { 
            float xComponent = (float)(Math.Pow(pointToCheck.X - ellipsePos.X, 2) / Math.Pow(ellipseWidth, 2)); 
            float yComponent = (float)(Math.Pow(pointToCheck.Y - ellipsePos.Y, 2) / Math.Pow(ellipseHeight, 2)); 
 
            float value = xComponent + yComponent; 
 
            if (value < 1) 
                return true; 
 
            return false; 
        } 


//http://www.isogenicengine.com/2010/10/13/spotlight-detecting-polygon-collision-in-javascript/
// Determine polygon intersection
function pointInPoly(polyCords, pointX, pointY)
{
 
	var i, j, c = 0;
 
	for (i = 0, j = polyCords.length - 1; i < polyCords.length; j = i++)
	{
 
		if (((polyCords[i][1] > pointY) != (polyCords[j][1] > pointY)) && (pointX < (polyCords[j][0] - polyCords[i][0]) * (pointY - polyCords[i][1]) / (polyCords[j][1] - polyCords[i][1]) + polyCords[i][0]))
		{
			c = !c;
		}
 
	}
 
	return c;
 
}


//http://www.gp32spain.com/foros/showthread.php?t=68247
Ese código es tremendamente complejo (quizá más bien largo), debes pensar siempre que lo que estás haciendo es un videojuego y todo proceso ha de estar minuciosamente miniaturizado... aún pensando esto te saldrán "morcillotes" incomprensibles así que imagínate sin pensar de esta forma.

Te paso la gravedad que utilizo en mi juego "Viaje al centro de la Tierra" que por cierto la primera fase está disponible en la sección de descargas Fénix GP2X, no tiene el código, pero si te gusta la forma en que se juega te lo puedo mandar sin problemas.

Es una buena práctica aumentar la precisión en la lectura del mapa de durezas haciendo unas cuantas comprobaciones de map_get_pixel en cada fotograma.

Lo olvidaba, este código que te muestro sirve para que el personaje se adapte a terrenos abruptos, curvos, en relieve, realistas o como lo querais llamar.

Código:

 if(trepando==0)
   from fine=-6 to 4;//10 comprobaciones por cuadro, xq no se mueve píxel a píxel
            suelo=map_get_pixel(graficos_fase,nivel,(x)/2,(y+fine)/2);//la gravedad se detiene en cuanto se toca el suelo
            if(suelo==duz.rojo | suelo==duz.naranja)
                y=y+fine;
                break;//se ha encontrado el suelo, ya no hay que seguir comprobando
            end
                 if(suelo==255)
                    suelo=0;
                 end
            if(y=>yminimo)//se ha salido del nivel
                       play_wav(s[21],0);//esto de aquí cambiaría en cada juego, claro
                       graph=no_graph;
                       clear_stats(1);
                       loop
                          frame;
                       end
            end
    end
    end 

     if(suelo==duz.rojo | suelo==duz.naranja)
          gravedad=0;
          //aquí van las cosas que puede hacer el personaje cuando está en el suelo o plataforma
     end

     //GRAVEDAD, no es un proceso, esto va dentro del código del personaje
    if(suelo==0 & salto==0 & trepando==0)//gravedad, está cayendo 
        fix=1; //no está quieto 
        en_el_suelo=0;//tampoco está en el suelo 
        y += 2 + gravedad;
        if(caida<255)
             caida++;
             if(caida==49)
               play_wav(s[21],0);
             end
        end
        if(contador==1)
        graph=32;
        end
        if(key(_right))  //se mueve peor en el aire
                from fine=5 to 0;
                   pared=map_get_pixel(graficos_fase,nivel,((x+20)+fine)/2,(y-1)/2);
                   if(pared==duz.marron)
                   break;
                   end
                end//fin del from
        if(pared!=duz.marron)
            flags=0;
            if(fin_de_salto==1)//va más rápido si cae debido a un salto, lleva el ímpetu del salto
                x += 5;
            else
            contador_aire++;
            if(contador_aire==2)
                contador_aire=0;
                x += 2; 
            end
            end
            end
        end
        
        if(key(_left))  //se mueve peor en el aire
                from fine=-5 to 0;
                   pared=map_get_pixel(graficos_fase,nivel,((x-20)+fine)/2,(y-1)/2);
                   if(pared==duz.marron)
                      break;
                   end
                 end//fin del from
        if(pared!=duz.marron)
            flags=1;
            if(fin_de_salto==1)
                x -= 5;
            else
            contador_aire++;
            if(contador_aire==2)
                contador_aire=0;
                x -= 2; 
            end
            end
            end
        end
        
        if(gravedad<12)
            contador_gravedad++;
            if(contador_gravedad==2)
                contador=1;
                gravedad++;
                contador_gravedad=0;
            end
        end
    end

Como ves se trata de un código muy sencillo y funcional (sobretodo si has probado mi juego).

Espero que te sirva de ayuda.
